
java.base/share/native/libjli/java.c

- JVMInit(...)

    int JVMInit(InvocationFunctions* ifn, jlong threadStackSize,
            int argc, char **argv,
            int mode, char *what, int ret) {
        ShowSplashScreen();
        return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);
    }

---

- ShowSplashScreen()

---

- ContinueInNewThread(...)

    int ContinueInNewThread(InvocationFunctions* ifn, jlong threadStackSize,
                        int argc, char **argv,
                        int mode, char *what, int ret)
    {
        if (threadStackSize == 0) {
            /*
             * If the user hasn't specified a non-zero stack size ask the JVM for its default.
             * A returned 0 means 'use the system default' for a platform, e.g., Windows.
             * Note that HotSpot no longer supports JNI_VERSION_1_1 but it will
             * return its default stack size through the init args structure.
             */
            struct JDK1_1InitArgs args1_1;
            memset((void*)&args1_1, 0, sizeof(args1_1));
            args1_1.version = JNI_VERSION_1_1;
            ifn->GetDefaultJavaVMInitArgs(&args1_1);  /* ignore return value */
            if (args1_1.javaStackSize > 0) {
                threadStackSize = args1_1.javaStackSize;
            }
        }

        { /* Create a new thread to create JVM and invoke main method */
            JavaMainArgs args;
            int rslt;

            args.argc = argc;
            args.argv = argv;
            args.mode = mode;
            args.what = what;
            args.ifn = *ifn;

            rslt = CallJavaMainInNewThread(threadStackSize, (void*)&args);
            /* If the caller has deemed there is an error we
             * simply return that, otherwise we return the value of
             * the callee
             */
            return (ret != 0) ? ret : rslt;
        }
    }
